Game.java

	generateHTMLFiles(): no need for test since to check whether its working, you only have to find if the amount of players in game is equal to the amount of files created by this function
    
    main(): the main file is not tested, since it makes use of other predefined functions, which are already tested. The rest is user interaction which needs no testing.
    
Player.java

    The instance when a random starting position is a water or treasure tile was not tested for, since the map generated is randomly generated, and we have no means of knowing beforehand where these tiles will be placed

	getMap(): was not tested because it is a simple getter, which only returns the player's map copy.


HTMLBuilder.java
	
	HTMLBuilder(): the constructor was not tested since its job is to create a text file with player id. In order to check whether this was working properly one could just go to the assigned file directory and check whether the file was there or not, with the proper player names.

	writeMaptToFile(): no need to test it since it produced an html file which could be inspectioned if an error occured. If the file could not be opened, the error would be caught through exception handling.

Map_Factory.java

    even though all the methods were covered, we still didnt get 100% line coverage, since in the tests we only used the instance of hazardous map. However since they both have the same architecture and only the amount of water tiles is different from the safe map, we felt no need to create another test using a safe map instance

Position.java

	The only method which was not tested for in this class is the toString() method, whose job is to print position co-ordinates on the console. Since this method only produces an output without any other hidden logic, there was no need for testing, since any error could be caught visually (apart from the fact that its use is pretty basic).

